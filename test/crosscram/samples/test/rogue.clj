(ns crosscram.samples.test.rogue
  (:use [clojure.test]
        [crosscram.samples.rogue])
  (:require [clojure.test.check :as tc]
            [clojure.test.check.generators :as gen]
            [clojure.test.check.properties :as prop]))

(defn gen-cell
  "Generates cells using `gen` for their coordinates"
  ([] (gen-cell gen/pos-int))
  ([gen] (gen-cell gen gen))
  ([gen0 gen1] (gen/tuple gen0 gen1)))

(defn horiz-cell
  "Returns the cell's right neighbor"
  [cell] (update-in cell [1] + 1))

(defn gen-move
  "Generator which returns a move comprised of a cell generated by
  `gen`, and the next (horizontal) cell"
  ([] (gen-move (gen-cell)))
  ([cell-gen]
   (gen/bind cell-gen
             (fn [cell]
               (gen/return cell)
               (gen/tuple (gen/return cell)
                          (gen/return (horiz-cell cell)))))))

(def covered-prop-simple
  (prop/for-all [mm (gen-move)]
                (= (covered? mm mm) 1)))

(def not-covered-prop-simple
  (prop/for-all [mm (gen-move)]
                (let [nn (gen/such-that #((not (some #{%} mm))) gen-move)]
                  (= (covered? mm nn) 0))))
